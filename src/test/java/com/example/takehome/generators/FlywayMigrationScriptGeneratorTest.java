package com.example.takehome.generators;

import com.example.takehome.dto.graphql.ContinentGqlData;
import com.example.takehome.enums.UserRole;
import com.example.takehome.model.User;
import com.example.takehome.service.GraphQlService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
/**
 * This class is used to generate the flyway migration script for the country and continent tables.
 * It is not a test class, but it is used to generate the flyway migration script SQL statements for populating latest data.
 * The SQL instructions are generated by running the test method.
 * The SQL instructions should be used to generate flyway scripts like this: src/main/resources/db/migration/V3__Populate_Data.sql file.
 */
@ActiveProfiles("test")
@SpringBootTest
@ContextConfiguration(classes = GraphQlService.class)
class FlywayMigrationScriptGeneratorTest {
    @Autowired
    private GraphQlService graphQlService;

    @Test
    public void generateFlywayMigrationData() {
        try {
            ContinentGqlData continentDto = graphQlService.getContinentsWithCountries();

            System.out.println("delete from country;");
            System.out.println("delete from continent;");

            continentDto.getData().getContinents().forEach(continent -> System.out.println("insert into continent(code, name) values ('" + continent.getCode() + "','" +  continent.getName() + "');" ));

            continentDto.getData().getContinents().forEach(continent -> continent.getCountries().forEach(country -> {
                //log.info(country.getCode() + "," + country.getName() + "," + continent.getCode());
                System.out.println("insert into country(code, name, continent_code) values ('" + country.getCode() + "','" +  country.getName() + "','" + continent.getCode() + "');");
            }));
            // Should be more than 5 continents
            assertTrue(continentDto.getData().getContinents().size() > 5);
        } catch (Exception e) {
            System.out.println("Error while retrieving new api data from the graphql endpoint: " + e);
            fail("Error loading GRAPHQL data.");
        }
    }

// Test users:
//    FirstName: Emily, LastName: Johnson, Email: emily.johnson@example.com, Password: Zd3k9XsT
//    FirstName: Carlos, LastName: Rodriguez, Email: carlos.rodriguez@example.com, Password: Hg7fDp2R
//    FirstName: Samantha, LastName: Lee, Email: samantha.lee@example.com, Password: Lk6tGh9Q
//    FirstName: Daniel, LastName: Kim, Email: daniel.kim@example.com, Password: Vb4rJf8W
//    FirstName: Julia, LastName: Martinez, Email: julia.martinez@example.com, Password: Nm5dRs7Z
    @Test
    public void generateFlywayUserData() {
        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        var user1 = User.builder()
                .firstName("Emily")
                .lastName("Johnson")
                .email("emily.johnson@example.com")
                .password(passwordEncoder.encode("Zd3k9XsT"))
                .userRole(UserRole.ADMIN)
                .build();
        generateUserInsertStatement(user1);

        var user2 = User.builder()
                .firstName("Carlos")
                .lastName("Rodriguez")
                .email("carlos.rodriguez@example.com")
                .password(passwordEncoder.encode("Hg7fDp2R"))
                .userRole(UserRole.USER)
                .build();
        generateUserInsertStatement(user2);

        var user3 = User.builder()
                .firstName("Samantha")
                .lastName("Lee")
                .email("samantha.lee@example.com")
                .password(passwordEncoder.encode("Lk6tGh9Q"))
                .userRole(UserRole.USER)
                .build();
        generateUserInsertStatement(user3);

        var user4 = User.builder()
                .firstName("Daniel")
                .lastName("Kim")
                .email("daniel.kim@example.com")
                .password(passwordEncoder.encode("Vb4rJf8W"))
                .userRole(UserRole.USER)
                .build();
        generateUserInsertStatement(user4);

        var user5 = User.builder()
                .firstName("Julia")
                .lastName("Martinez")
                .email("julia.martinez@example.com")
                .password(passwordEncoder.encode("Nm5dRs7Z"))
                .userRole(UserRole.USER)
                .build();
        generateUserInsertStatement(user5);
    }

    private void generateUserInsertStatement(User user) {
        System.out.println("insert into api_user(first_name, last_name, email, password, role) values ('" + user.getFirstName() + "','" +  user.getLastName() + "','" + user.getEmail() + "','" + user.getPassword() + "','" + user.getUserRole() + "');");
    }
}